"""
	Satellite link budget calculator GUI app

	In order to use it, you need to first install PySimpleGUI from:
	https://github.com/PySimpleGUI/PySimpleGUI

	Copyright (C) 2021  Tomas Palenik, All rights reserved. 

	contact: tomas.palenik@stuba.sk

	Tested with: Python 3.8.5 and PySimpleGUI 4.45.0.4 Ubuntu 18.04LTS
	and Windows 10.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.

	Some effort has been made to make the source code more or less PEP-8 compliant,
	with a few exceptions, the biggest being the use of tabs for indenting.
	Use reindent for that: https://pypi.org/project/reindent/

	Acknowledgement:
	This work was supported by the Slovak Research and
	Development Agency under the Contract no. APVV-19-0436
	and also by the Scientific Grant Agency of
	the Ministry of Education of Slovak Republic and Slovak
	Academy of Sciences (grant VEGA 1/0477/18)
	and the European Space Agency under the Contract no. ESA AO/1-10044/19/NL/SC
	Space Engineering Through (True) Training (SETTT).
"""

import math as m
import PySimpleGUI as sg

_defaults = {'eta': '0.6', 'etg': '0.55'}
_precisions = (2, 3, 4, 5, 6, 7, 8, 9, 10, 'e')
_precision = 2

_defaultEta = 0.55  # dish antenna effectivity
# speed of light in vacuum: default value -vs- more precise
_CS = {'cd': 3e8, 'cp': 299792458.0}
_C = _CS['cd']

_K = 1.38064852e-23  # Boltzmann constant in m2.kg.s-2.K-1
_KDB = 10 * m.log10(_K)

"""
	First, the actual link budget equations:
"""


def _freq2wavelength(freq):
	"""
	Converts frequency in GHz to wavelengt in m
	"""
	return _C / (freq * 1e9)


def _wavelength2freq(lam):
	"""
	Converts wavelength in mm to frequency in GHz
	"""
	return (_C / (lam * 0.001)) / 1e9


def _antenna(fc, d, eta):
	"""
	Antenna equations:
		fc is in Ghz, D in m
		wavelength output is in mm
	"""
	ap = m.pi * d ** 2 / 4.0  # assuming circular antenna cross-section
	ae = eta * ap
	wavelenght = _freq2wavelength(fc)
	g = (4.0 * m.pi * ae) / (wavelenght ** 2)
	gdb = 10 * m.log10(g)
	return ap, ae, gdb, wavelenght * 1000


def _dbconv(svl=None, svdb=None, lvl=None, lvdb=None):
	"""
	conversion to db has priority over the opposite direction
	"""
	if svl not in (None, ''):
		svdb = 10 * m.log10(svl)
	elif svdb not in (None, ''):
		svl = 10 ** (svdb / 10.0)
	else:
		svdb = svl = None

	if lvl not in (None, ''):
		lvdb = 20 * m.log10(lvl)
	elif lvdb not in (None, ''):
		lvl = 10 ** (lvdb / 20.0)
	else:
		lvdb = lvl = None
	return svl, svdb, lvl, lvdb


def _tx_out(phpa, gt, eta, lb_, lbo, lf):
	"""
	Mandatory inputs: Phpa - amplifier power, Gt - antenna gain, eta - antenna effectivity
	"""
	pt_ = phpa - lb_ - lbo - lf
	etadb = 10 * m.log10(eta)
	pt_out = pt_ + etadb
	eirp = pt_out + gt
	return pt_, pt_out, eirp


def _nmi2km(nmi):
	return 1.852 * nmi


def _km2nmi(km):
	return km / 1.852


def _path_loss(distance, freq, lu):
	"""
	Distance is in km, frequency in GHz
	"""
	wavelength = _freq2wavelength(freq)
	linear = (4 * m.pi * 1000 * distance) / wavelength
	ls = 20 * m.log10(linear)
	return ls, ls + lu, _km2nmi(distance)


def _rx_in(eirp, lul, gr, fom, rb, lf, lb_, ebn0r=None):
	"""
	Rb is bitrate in Mbps
	assuming signal power == carrier power ==> CNR == SNR
	"""
	c = eirp - lul + gr
	cnr = eirp - lul - _KDB + fom - lf - lb_
	ebno = cnr - 10 * m.log10(rb * 1e6)
	if ebn0r is None:
		return c, cnr, ebno
	else:
		mar = ebno - ebn0r
		return c, cnr, ebno, mar






"""
	Now we create the GUI layout using PySimpleGUI and export some globals for furthr use:
"""

_DL4 = b''
_UL4 = b''


def create_gui(defaults):
	# Sizes of various GUI elements
	l1s = (7, 1)  # label before text input field
	ins = (12, 1)  # text input field
	l2s = (4, 1)  # label after text input field
	fsp = ('Helvetica', 10)
	fsu = ('Helvetica', 10, 'underline')
	fsg = ('Symbol', 10)
	fsu_ = ('Symbol', 10, 'underline')
	filspc = ' ' * 60
	value_check = True

	# valid ranges for common variables user input
	fcr = (0.001, 1e3)  # carrier frequency in GHZ
	efr = (0.0, 2.0)  # antenna efectivity
	gar = (0.0, 1e3)  # antenna gain in dB
	lvr = (-10.0, 100.0)  # various additional losses in dB
	dsr = (1.0, 1e6)  # satellite distance in km or nmi
	hpr = (1.0, 1e6)  # power amplifier gain in dB
	fmr = (-1e3, 1e3)  # RX antenna figure of merit in DB
	rbr = (1e-3, 1e9)  # data rate in Mbps
	ebr = (1e-2, 1e2)  # Required Eb/N0 in dB

	def in_text(type_, k_=None, l1_='', l2_='', val='', under=False, ee=False, greek=False):
		"""

		:param greek: use greek symbol
		:param type_: 'in' for input text (numeric value), 'tx' for label, 'bn' for button, 'com' for combo box
		:param k_: key to use by the GUI
		:param l1_: label before input
		:param l2_: label after input
		:param val: default value
		:param under: underlined font - indicates required field
		:param ee: - GUI enable events flag
		:return: layout element
		"""
		if under is True:
			if greek is True:
				fspc = fsu_
			else:
				fspc = fsu
		else:
			if greek is True:
				fspc = fsg
			else:
				fspc = fsp

		if type_ == 'in':
			middle = sg.InputText(key=k_, default_text=val, size=ins, enable_events=ee)
		elif type_ == 'tx':
			middle = sg.Text(key=k_, text=val, size=ins)
		elif type_ == 'bn':
			middle = sg.Button(val, key=k_, size=l1s)
		elif type_ == 'com':
			middle = sg.Combo(val, default_value=val[0], key=k_, size=l1s, enable_events=ee)
		else:
			raise ValueError('Unknown element type')

		layout = [
			sg.Text(l1_, size=l1s, font=fspc),
			middle,
			sg.Text(l2_, size=l2s, font=fsp)
		]
		return layout

	# Section 0a: Antenna parameters calculator layout
	# input, output and all keys
	i0a = ('fc', 'diam', 'eta', 'lam')
	o0a = ('ap', 'ae', 'ga')
	k0a = i0a + o0a
	# labels for help messages
	l0a = {	'fc':	'Carrier frequency fc',
				'diam':	'Antenna diameter D',
				'eta':	'Antenna effectivity n (eta)',
				'lam':	'Wavelength',
				'ap':	'Physical antenna aperture Ap',
				'ae':	'Effective antenna aperture Ae',
				'ga':	'Antenna gain G'
			}

	# range of valid values
	r0a = {	'fc':	fcr,
			'diam':	(0.001, 1000),
			'eta':	efr,
			'lam': (1e-8, 1e8)
		}

	eta = defaults['eta'] if 'eta' in defaults else ''

	l_ant_i = [	in_text('in', 'fc', 'fc', 'GHz',	'', 	True, value_check),
				in_text('in', 'diam', 'D', 'm',		'',		True, value_check),
				in_text('in', 'eta', 'h', '', 		eta,	True, value_check, True),
				in_text('tx', '', '', '', '', False)
			]

	l_ant_o = [	in_text('in', 'lam', 'l', 'mm', 	'', 	False, value_check, True),
				in_text('tx', 'ap', 'Ap', 'm2', '', False, value_check),
				in_text('tx', 'ae', 'Ae', 'm2', '', False, value_check),
				in_text('tx', 'ga', 'G', 'dBi', '', False, value_check)
			]

	f_ant = sg.Frame('Antenna calculator', [[sg.Column(l_ant_i), sg.Column(l_ant_o)],
											[sg.Text(filspc), sg.Button('Clear', key='cl0a'),
											sg.Button('Compute', key='c0a')],
											[sg.Text('Copy fc and TX antenna Gt and n to:', font=fsp)],
											[sg.Button('Uplink', size=l1s, key='cafu'),
											sg.Button('Downlink', size=l1s, key='cafd')]
											])

	# Section 0d: Linear -vs- decibel convertor layout
	# input, output and all keys - are all the same in this section
	i0d = ('svl', 'svdb', 'lvl', 'lvdb')
	o0d = i0d
	k0d = i0d
	# labels for help messages
	l0d = {	'svl':	'Squared variable in linear scale',
			'svdb':	'Squared variable in dB',
			'lvl':	'Linear variable in linear scale',
			'lvdb':	'Linear variable in dB'
			}

	r0d = {	'svl':	(1e-100, 1e+100),
			'svdb':	(-100.0, 100.0),
			'lvl':	(1e-100, 1e+100),
			'lvdb':	(-100.0, 100.0)
			}

	l_db = [[sg.Text('Squared variables 10log10: P, G, L, G/T, k, n, R', font=fsp)],
			[sg.Text('lin', size=l2s, font=fsp), sg.InputText(size=ins, key='svl'),
			sg.Text(' == ', size=l2s, font=fsp), sg.InputText(size=ins, key='svdb'),
			sg.Text(' dB ', size=l2s)],
			[sg.Text('Linear variables 20log10: U,I', font=fsp)],
			[sg.Text('lin', size=l2s, font=fsp), sg.InputText(size=ins, key='lvl'),
			sg.Text(' == ', size=l2s, font=fsp), sg.InputText(size=ins, key='lvdb'),
			sg.Text(' dB ', size=l2s)],
			[sg.Text(filspc, font=fsp), sg.Button('Clear', key='cl0d'), sg.Button('Compute', key='c0d')]
		]

	f_db = sg.Frame('Decibel calculator', l_db, vertical_alignment='top')

	# Section 0t: run predefined unit tests
	# input, output and all keys - there are none
	f_test = sg.Frame('Load predefined test sets:', [[	sg.Button('Test1', key='t1'),
														sg.Button('Test2', key='t2'),
														sg.Button('Test3', key='t3')]
													])

	n_t0 = 'Optional waveleght input overrides carrier frequency input fc in Antenna section'
	n_t1 = 'Antenna section assumes circular antenna aperture'
	n_t2 = 'dB convertor works both ways linear > dB, dB > linear, but the first one has priority. Use clear button if necesary.'
	n_t3 = 'Underlined variables are inputs necessary for section output calculation.'
	n_t4 = 'Distances dUL and dDL in nautical miles (nmi) override distances in km.'
	n_t5 = 'All intermediate values, such as EIRP or calculated losses are internally used for further calculations unrounded. That means even if you see their rounded values in the GUI output, the calculations use unrounded values, that may be slightly different. Therefore if you just copy the rounded values from the GUI and do the calculation yourself, you may obtain slightly different results. This is especially true for low precision GUI setting.'
	n_t6 = 'The precision setting affects output fields. Some of them are editable and sometimes serve as inputs (such as wavelength). These are affected too. Pure input fields (such as various additional losses) stay as the user entered them.'
	n_text = n_t0 + '\n\n' + n_t1 + '\n\n' + n_t2 + '\n\n' + n_t3 + '\n\n' + n_t4 + '\n\n' + n_t5 + '\n\n' + n_t6
	f_notice = sg.Frame('Notice:', [[sg.Text(n_text, size=(60, 30))]])

	# Section 1: Ground station - transmitter layout
	# input, output and all keys
	i1 = ('phpag', 'lbpag', 'lbopag', 'gtg', 'lftg', 'etg')
	o1 = ('ptig', 'ptg', 'eirg')
	k1 = i1 + o1

	# section labels for help messages
	l1 = {	'phpag':	'Ground TX HPA output power PHPA',
			'lbpag':	'Ground TX HPA branching loss Lb',
			'lbopag':	'Ground TX HPA back-off loss Lbo',
			'gtg':		'Ground TX antenna gain Gt',
			'lftg':		'Ground TX antenna feeder loss Lt',
			'etg':		'Ground TX antenna effectivity n',
			'ptig':		'Ground TX antenna input power PT',
			'ptg':		'Ground TX antenna output power Pt',
			'eirg':		'Ground TX antenna EIRP'
		}

	r1 = {	'phpag':	hpr,
			'lbpag':	lvr,
			'lbopag':	lvr,
			'gtg':		gar,
			'lftg':		lvr,
			'etg':		efr
	}

	g_hpa = [[	sg.Text('TX HPA', font=fsp)],
				in_text('in', 'phpag', 'PHPA', 'dBW', '', True, value_check),
				in_text('in', 'lbpag', 'Lb', 'dB', '', False, value_check),
				in_text('in', 'lbopag', 'Lbo', 'dB', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check)
			]

	etg = defaults['etg'] if 'etg' in defaults else ''
	g_tx_ant = [[	sg.Text('TX Antenna')],
					in_text('in', 'gtg', 'Gt', 'dBi', '', True, value_check),
					in_text('in', 'lftg', 'Lf', 'dB', '', False, value_check),
					in_text('in', 'etg', 'h', '', etg, True, value_check, True),
					in_text('tx', 'ptig', 'PT', 'dBW', '', False, value_check),
					in_text('tx', 'ptg', 'Pt', 'dBW', '', False, value_check),
					in_text('tx', 'eirg', 'EIRP', 'dBW', '', False, value_check)
				]

	# Section 2: Uplink losses layout
	# input, output and all keys
	i2 = ('dul', 'fcul', 'luul', 'dulm')
	o2 = ('lsul', 'lul')
	k2 = i2 + o2
	# section labels for help messages
	l2 = {	'dul'	: 'Uplink distance dUL',
			'fcul'	: 'Uplink carrier frequency fcUL',
			'luul'	: 'Uplink additional atmospheric losses Lu',
			'dulm'	: 'Uplink distance dUL in nautical miles',
			'lsul'	: 'Uplink path loss Ls',
			'lul'	: 'Total uplink losses LUL'
		}

	r2 = {	'dul'	: dsr,
			'dulm'	: dsr,
			'fcul'	: fcr,
			'luul'	: lvr
	}

	ul = [	in_text('in', 'dul', 'dUL', 'km', '', True, value_check),
			in_text('in', 'fcul', 'fcUL', 'GHz', '', True, value_check),
			in_text('in', 'luul', 'Lu', 'dB', '', False, value_check)
		]

	ul_m = [in_text('in', 'dulm', ' == ', 'nmi', '', False, value_check),
			in_text('tx', 'lsul', 'Ls', 'dB', '', False, value_check),
			in_text('tx', 'lul', 'LUL', 'dB', '', False, value_check)
			]

	# Section 3: Satellite receiver layout
	# input, output and all keys
	i3 = ('grs', 'lfrs', 'rbu', 'lbrs', 'fomrs', 'ebn0rs')
	o3 = ('crs', 'cns', 'ebn0s', 'margs')
	k3 = i3 + o3
	# section labels for help messages
	l3 = {
		'grs': 'Satellite RX antenna gain Gr',
		'lfrs': 'Satellite antenna feeder loss',
		'crs': 'Satellite RX received carrier power C',
		'rbu': 'Uplink data rate Rb',
		'lbrs': 'Satellite RX LNA losses Lb',
		'fomrs': 'Satellite RX LNA figure of merit G/T',
		'cns': 'Satellite RX Carrier to Noise ratio C/N',
		'ebn0s': 'Satellite RX actual Eb/N0',
		'ebn0rs': 'Satellite RX required Eb/N0 ',
		'margs': 'Uplink margin'
	}

	r3 = {	'grs' 	: gar,
			'lfrs'	: lvr,
			'rbu'	: rbr,
			'lbrs'	: lvr,
			'fomrs'	: fmr,
			'ebnor'	: ebr
	}

	s_rx_ant = [[	sg.Text('RX Antenna')],
					in_text('in', 'grs', 'Gr', 'dBi', '', True, value_check),
					in_text('in', 'lfrs', 'Lf', 'dB', '', False, value_check),
					in_text('tx', 'crs', 'C', 'dBW', '', False, value_check),
					in_text('in', 'rbu', 'Rb', 'Mbps ', '', True, value_check),
					in_text('tx', None, ' ', ' ', '', False, value_check),
					in_text('tx', None, ' ', ' ', '', False, value_check)
			]

	s_lna = [[	sg.Text('RX LNA')],
				in_text('in', 'lbrs',	'Lb', 'dB', '', False, value_check),
				in_text('in', 'fomrs',	'G/Te', 'dB/K', '', True, value_check),
				in_text('tx', 'cns',	'C/N', 'dB', '', False, value_check),
				in_text('tx', 'ebn0s',	'Eb/N0', 'dB', '', False, value_check),
				in_text('in', 'ebn0rs',	'Eb/N0R', 'dB', '', False, value_check),
				in_text('tx', 'margs',	'Margin', 'dB', '', False, value_check)
			]

	# Section 4: Satellite transmitter layout
	i4 = ('ptpas', 'lbpas', 'lbopas', 'gts', 'lfts', 'ets')
	o4 = ('ptis', 'pts', 'eirs')
	k4 = i4 + o4
	# section labels for help messages
	l4 = {
		'ptpas': 'Satellite TX HPA output power PT',
		'lbpas': 'Satellite TX HPA losses Lb',
		'lbopas': 'Satellite TX HPA back-off loss Lbo',
		'gts': 'Satellite TX antenna gain Gt',
		'lfts': 'Satellite TX antenna feeder loss Lf',
		'ets': 'Satellite TX antenna effectivity',
		'ptis': 'Satellite TX antenna input power PT',
		'pts': 'Satellite TX antenna output power Pt',
		'eirs': 'Satellite TX antenna EIRP',
	}

	r4 = {	'ptpas':	hpr,
			'lbpas':	lvr,
			'lbopas':	lvr,
			'gts':		gar,
			'lfts':		lvr,
			'ets':		efr
	}

	s_hpa = [[	sg.Text('TX HPA')],
				in_text('in', 'ptpas', 'PHPA', 'dBW', '', True, value_check),
				in_text('in', 'lbpas', 'Lb', 'dB', '', False, value_check),
				in_text('in', 'lbopas', 'Lbo', 'dB', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check),
				in_text('tx', None, ' ', ' ', '', False, value_check)
			]

	ets = defaults['ets'] if 'ets' in defaults else ''
	s_tx_ant = [[	sg.Text('TX Antenna')],
					in_text('in', 'gts', 'Gt', 'dBi', '', True, value_check),
					in_text('in', 'lfts', 'Lf', 'dB', '', False, value_check),
					in_text('in', 'ets', 'h', '', ets, True, value_check, True),
					in_text('tx', 'ptis', 'PT', 'dBW', '', False, value_check),
					in_text('tx', 'pts', 'Pt', 'dBW', '', False, value_check),
					in_text('tx', 'eirs', 'EIRP', 'dBW', '', False, value_check)
				]

	# Section 5: downlink losses
	# input, output and all keys
	i5 = ('ddl', 'fcdl', 'lddl', 'ddlm')
	o5 = ('lsdl', 'ldl')
	k5 = i5 + o5
	# section labels for help messages
	l5 = {
		'ddl': 'Downlink distance dDL',
		'fcdl': 'Downlink carrier frequency fDL',
		'lddl': 'Downlink additional atmospheric losses Ld',
		'ddlm': 'Downlink distance dDL in nautical miles',
		'lsdl': 'Downlink path loss Ls',
		'ldl': 'Total downlink losses LDL'
	}

	r5 = {	'ddl'	: dsr,
			'ddlm'	: dsr,
			'fcdl'	: fcr,
			'lddl'	: lvr
	}

	dl = [	in_text('in', 'ddl', 'dDL', 'km', '', True, value_check),
			in_text('in', 'fcdl', 'fcDL', 'GHz', '', True, value_check),
			in_text('in', 'lddl', 'Ld', 'dB', '', False, value_check)
		]

	dl_m = [in_text('in', 'ddlm', ' == ', 'nmi', '', False, value_check),
			in_text('tx', 'lsdl', 'Ls', 'dB', '', False, value_check),
			in_text('tx', 'ldl', 'LDL', 'dB', '', False, value_check)
			]

	# Section 6: ground staion RX
	i6 = ('grg', 'lfrg', 'rbd', 'lbrg', 'fomrg', 'ebn0rg')
	o6 = ('crg', 'cng', 'ebn0g', 'margg')
	k6 = i6 + o6
	# section labels for help messages
	l6 = {
		'grg': 'Ground RX antenna gain Gr',
		'lfrg': 'Ground RX antenna feeder loss Lf',
		'crg': 'Ground RX antenna received carrier power C',
		'rbd': 'Downlink data rate Rb',
		'lbrg': 'Ground RX LNA gain Gr',
		'fomrg': 'Ground RX LNA figure of merit G/T',
		'cng': 'Ground RX LNA carrier to noise ratio C/N',
		'ebn0g': 'Ground RXactual Eb/N0',
		'ebn0rg': 'Ground RXrequired Eb/N0 ',
		'margg': 'Downlink margin',
	}

	r6 = {	'grg' 	: gar,
			'lfrg'	: lvr,
			'rbd'	: rbr,
			'lbrg'	: lvr,
			'fomrg'	: fmr,
			'ebnor'	: ebr
	}

	g_rx_ant = [[	sg.Text('RX Antenna')],
					in_text('in', 'grg', 'Gr', 'dBi', '', True, value_check),
					in_text('in', 'lfrg', 'Lf', 'dB', '', False, value_check),
					in_text('tx', 'crg', 'C', 'dBW', '', False, value_check),
					in_text('in', 'rbd', 'Rb', 'Mbps ', '', True, value_check),
					in_text('tx', None, ' ', ' ', '', False, value_check),
					in_text('tx', None, ' ', ' ', '', False, value_check)
			]

	g_lna = [[	sg.Text('RX LNA')],
				in_text('in', 'lbrg', 'Lb', 'dB', '', False, value_check),
				in_text('in', 'fomrg', 'G/Te', 'dB/K', '', True, value_check),
				in_text('tx', 'cng', 'C/N', 'dB', '', False, value_check),
				in_text('tx', 'ebn0g', 'Eb/N0', 'dB', '', False, value_check),
				in_text('in', 'ebn0rg', 'Eb/N0R', 'dB', '', False, value_check),
				in_text('tx', 'margg', 'Margin', 'dB', '', False, value_check)
			]

	s_rx_f = sg.Frame('3. Satellite RX', [	[sg.Column(s_rx_ant), sg.Column(s_lna)],
											[sg.Text(filspc), sg.Button('Clear', key='cl3'),
												sg.Button('Compute', key='c3')]
										])

	ul_l = sg.Frame('2. Uplink losses', [	[sg.Column(ul), sg.Column(ul_m)],
											[sg.Text(filspc), sg.Button('Clear', key='cl2'),
												sg.Button('Compute', key='c2')],
											[sg.Image(data=_UL4, size=(420, 400))]
										])

	g_tx_f = sg.Frame('1. Ground TX', [	[sg.Column(g_hpa), sg.Column(g_tx_ant)],
										[sg.Text(filspc), sg.Button('Clear', key='cl1'),
											sg.Button('Compute', key='c1')]
										])

	s_tx_f = sg.Frame('4. Satelllite TX', [	[sg.Column(s_hpa), sg.Column(s_tx_ant)],
											[sg.Text(filspc), sg.Button('Clear', key='cl4'),
												sg.Button('Compute', key='c4')]
										])

	dl_l = sg.Frame('5. Downlink losses', [	[sg.Column(dl), sg.Column(dl_m)],
											[sg.Text(filspc), sg.Button('Clear', key='cl5'),
											sg.Button('Compute', key='c5')],
											[sg.Image(data=_DL4, size=(420, 400))]
											])

	g_rx_f = sg.Frame('6. Ground RX',	[	[sg.Column(g_rx_ant), sg.Column(g_lna)],
											[sg.Text(filspc), sg.Button('Clear', key='cl6'),
												sg.Button('Compute', key='c6')]
										])

	l_set = [[	sg.Text('Speed of light c == '),
				sg.Radio('300 000 000 m/s', 'radio', key='cd', default=True, enable_events=True),
				sg.Radio('299 792 458 m/s', 'radio', key='cp', enable_events=True),
				sg.Text('       ')]
				+ in_text('com', 'prec', 'Prec.', 'digits', _precisions, False, True)
				+ [sg.Text('      Boltzmann constant: ' + str(_K) +' in dB: ' + str(round(_KDB, 8))),
				sg.Text(' ' * 42), sg.Button('Clear all', key='clear'), sg.Text('       '), sg.Button('Help', key='help')]
			]

	window = sg.Window(	'Link budget calculator',
						[	[sg.Frame('', l_set, vertical_alignment='top')],
							[sg.Frame('Tools', [[f_ant], [f_db], [f_test], [f_notice]], vertical_alignment='top'),
							sg.Frame('Uplink', 	[[s_rx_f], [ul_l], [g_tx_f]]),
							sg.Frame('Downlink', [[s_tx_f], [dl_l], [g_rx_f]])]
						])

	# all GUI element keys
	input_keys = i0a + i0d + i1 + i2 + i3 + i4 + i5 + i6
	output_keys = o0a + o0d + o1 + o2 + o3 + o4 + o5 + o6
	keys = k0a + k0d + k1 + k2 + k3 + k4 + k5 + k6

	section_keys = {'c0a': k0a, 'c0d': k0d, 'c1': k1, 'c2': k2, 'c3': k3, 'c4': k4, 'c5': k5, 'c6': k6}
	section_cl_keys = {'cl0a': k0a, 'cl0d': k0d, 'cl1': k1, 'cl2': k2, 'cl3': k3, 'cl4': k4, 'cl5': k5, 'cl6': k6}
	# maps unique keys to user- friendly labels for error messages
	loth = {'c': 'Speed of light in vacuum c'}
	labels = {**loth, **l0a, **l0d, **l1, **l2, **l3, **l4, **l5, **l6}
	ranges = {**r0a, **r0d, **r1, **r2, **r3, **r4, **r5, **r6}

	section_labels = {	'c0a':	'Antenna calculator',
						'c0d':	'Decibel convertor',
						'c1':	'1. Ground TX',
						'c2':	'2. Uplink losses',
						'c3':	'3. Satellite RX',
						'c4':	'4. Satellite TX',
						'c5':	'5. Downlink losses',
						'c6':	'6. Ground RX'
					}

	return window, input_keys, output_keys, keys, section_keys, section_cl_keys, labels, ranges, section_labels


"""
	END OF GUI definitions - now really create the GUI
	and set global variables: 
		GUI: _window, _keys, _input_keys, _output_keys, _labels, _section_keys
		worker class: lb
"""
(_window, _input_keys, _output_keys, _keys, _section_keys,
	_section_cl_keys, _labels, _ranges, _section_labels) = create_gui(_defaults)


def _set_values(dval):
	"""
		load window elements values from a dictionary
	"""
	for k_ in dval.keys():
		_window[k_].update(dval[k_])


def _set_section_values(sk, val):
	"""
		load GUI section values from a dictionary of dictionaries
	"""
	ds = val[sk]  # get GUI section dictionary
	_set_values(ds)


def _clear_section_values(keys):
	for k_ in keys:
		_window[k_].update('')


def _get_val(k_, vals):
	"""
		load a value primarily from values parameter > usualy user inputs,
		if not found then from _window element (output of previous operation)
		if not found even there returns None
	"""
	if k_ not in vals:
		if k_ not in _keys:
			sg.Popup('getVal error:', k_, vals)
			return None
		else:
			return _window[k_].get()
	else:
		return vals[k_]


def _valid_float(str_):
	"""
		checks the input string contains a valid float number
		returns float value or False
		empty string returns zero float value
	"""
	s = str_.strip()
	try:
		fv = float(s)
	except ValueError:
		fv = False
	return fv


def _check_range(k_, v):
	(vmin, vmax) = _ranges[k_]
	if v < vmin or v > vmax:
		sg.Popup('Input error on: ' + _labels[k_], 'Value outside supported range:( ' + str(vmin) + ', ' + str(vmax) + ' )')
		_window[k_].update('')
		return False
	return True


def _get_mandatory(val, kl):
	"""
		checks that each of the values defines by a key list is set and numeric
		returns:
		True if all OK + dictionary: string key > float value
		False if not OK + first offending key
	"""
	o_ = {}
	for k_ in kl:
		vs = _get_val(k_, val)
		if vs in (None, ''):
			return False, k_
		v = _valid_float(vs)
		if v is not False:
			o_[k_] = v
		else:
			sg.Popup('Not a valid float number in: ', _labels[k_])
			return False, k_
		if k_ in _input_keys:
			if not _check_range(k_, v):
				return False, k_
	return True, o_


def _get_optional(val, kl, out_=0.0):
	"""
		scans each of the values defined by a key list and tries to convert
		if cannot convert or empty > outputs zero value by default
		returns a dictionary with all key set and float values
	"""
	o_ = {}
	for k_ in kl:
		v = _valid_float(val[k_])
		if v is False:
			if val[k_] not in (None, ''):
				sg.Popup('Not a valid float number in: ', _labels[k_])
				_window[k_].update('')
			v = out_
		o_[k_] = v
	return o_


def _update_outputs(keys, vals):
	"""
		update all elements defined by a list of keys  to contain values defined in dictionary
	"""
	if _precision > 10:
		fs = '{v:.6e}'
	else:
		fs = '{v:.' + str(_precision) + 'f}'

	for k_ in keys:
		if vals[k_] in (None, ''):
			continue
		vf = float(vals[k_])
		if _precision <= 10:
			vf = round(vf, _precision)

		sv = fs.format(v=vf)
		_window[k_].update(sv)


def tuple2dict(tup, keys):
	if type(tup) != tuple:
		tup = (tup,)
	assert len(tup) == len(keys)
	out_ = {}
	for i in range(len(tup)):
		out_[keys[i]] = '' if tup[i] is None else round(tup[i], _precision)
	return out_


def _copy_non_empty(src, dst):
	"""
		copy all nonempty values from src dictionary to dst dictionary
		overwrites values in dst
	"""
	for k_ in src.keys():
		if src[k_] not in ('', None):
			dst[k_] = src[k_]


def _validate_input(value):
	"""
		assuming value is string
	"""
	if value in (None, ''):
		return None

	if value[-1] not in '0123456789.-+e':
		return value[:-1]


def _unit_test_values(test):
	if test == 't1':
		tv = {
			'c0a':	{},
			'c0d':	{},
			'c1':	{'phpag': '33', 'lbpag': '4', 'lbopag': '3', 'gtg': '64', 'etg': '0.6'},
			'c2':	{'dul': '37000', 'fcul': '14', 'luul': '0.6'},
			'c3':	{'grs': '23.7', 'fomrs': '-5.3', 'rbu': '120'},
			'c4':	{},
			'c5':	{},
			'c6':	{}
		}
	elif test == 't2':
		tv = {
			'c0a':	{},
			'c0d':	{},
			'c1':	{},
			'c2':	{},
			'c3':	{},
			'c4':	{'ptpas': '10', 'lbopas': '0.1', 'lbpas': '0.5', 'gts': '30.8', 'ets': '0.6'},
			'c5':	{'ddl': '39000', 'fcdl': '12', 'lddl': '0.4'},
			'c6':	{'fomrg': '37.7', 'lbrg': '0', 'grg': '62.0', 'rbd': '120'}
		}
	elif test == 't3':
		tv = {
			'c0a':	{},
			'c0d':	{},
			'c1':	{},
			'c2':	{},
			'c3':	{},
			'c4':	{},
			'c5':	{},
			'c6':	{}
		}
	else:
		tv = None
	return tv


_section_mandatories = {	'c0a':	['fc', 'diam', 'eta'],
							'c0d':	[],
							'c1':	['phpag', 'gtg', 'etg'],
							'c2':	['dul', 'fcul'],
							'c3':	['eirg', 'lul', 'grs', 'fomrs', 'rbu'],
							'c4':	['ptpas', 'gts', 'ets'],
							'c5':	['ddl', 'fcdl'],
							'c6':	['eirs', 'ldl', 'grg', 'fomrg', 'rbd']
						}

_section_optionals = {	'c0a':	[],
						'c0d':	['svl', 'svdb', 'lvl', 'lvdb'],
						'c1':	['lbpag', 'lbopag', 'lftg'],
						'c2':	['luul'],
						'c3':	['lfrs', 'lbrs', 'ebn0rs'],
						'c4':	['lbpas', 'lbopas', 'lfts'],
						'c5':	['lddl'],
						'c6':	['lfrg', 'lbrg', 'ebn0rg']
					}

_section_outputs = {	'c0a':	['ap', 'ae', 'ga', 'lam'],
						'c0d':	['svl', 'svdb', 'lvl', 'lvdb'],
						'c1':	['ptig', 'ptg', 'eirg'],
						'c2':	['lsul', 'lul','dulm'],
						'c3':	['crs', 'cns', 'ebn0s', 'margs'],
						'c4':	['ptis', 'pts', 'eirs'],
						'c5':	['lsdl', 'ldl', 'ddlm'],
						'c6':	['crg', 'cng', 'ebn0g', 'margg']
					}

_check_keys = (	'fc', 'diam', 'eta', 'lam', 'ap', 'ae', 'ga',
				'svl', 'svdb', 'lvl', 'lvdb',
				'phpag', 'lbpag', 'lbopag', 'gtg', 'lftg', 'etg', 'ptig', 'ptg', 'eirg',
				'dul', 'fcul', 'luul', 'dulm', 'lsul', 'lul',
				'grs', 'lfrs', 'rbu', 'lbrs', 'fomrs', 'ebn0rs', 'crs', 'cns', 'ebn0s', 'margs',
				'ptpas', 'lbpas', 'lbopas', 'gts', 'lfts', 'ets', 'ptis', 'pts', 'eirs',
				'ddl', 'fcdl', 'lddl', 'ddlm', 'lsdl', 'ldl',
				'grg', 'lfrg', 'rbd', 'lbrg', 'fomrg', 'ebn0rg', 'crg', 'cng', 'ebn0g', 'margg'
			)

# Actual functions implementing section calculations
_fun = {'c0a': _antenna, 'c0d': _dbconv, 'c1': _tx_out, 'c2':  _path_loss,
		'c3':  _rx_in, 'c4':  _tx_out, 'c5':  _path_loss, 'c6':  _rx_in}


def _recompute_all():
	for e in ('c0a', 'c0d', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6'):
		if e != 'c0d':
			ok_, r_ = _get_mandatory(values, _section_mandatories[e])
			opt = 0.0
		else:
			ok_ = True
			r_ = {}
			opt = None

		if not ok_:
			continue

		o_ = _get_optional(values, _section_optionals[e], opt)
		pd_ = {**r_, **o_}
		pt_ = pd_.values()
		fun_ = _fun[e]
		ot_ = fun_(*pt_)
		out_ = tuple2dict(ot_, _section_outputs[e])
		_update_outputs(_section_outputs[e], out_)


if _keys != _check_keys:
	print('Keys sanity check failed')
	quit()


# speed of light value selection - default 3e8
_ck_old = 'cd'


def _print_help():
	rk = _ranges.keys()
	text = ''
	for sk in _section_keys:
		text += _section_labels[sk] + ' section:\n\n'
		lk = _section_keys[sk]
		for k_ in lk:
			text += '  ' + _labels[k_] + '\n'
			if k_ in rk:
				text += '    range limited to: ' + str(_ranges[k_]) + '\n'
		text += '\n'
	sg.popup_scrolled(text, title='Help')





def convert(nmik, kmk, val, fun):
	if val[nmik] not in (None, ''):
		try:
			v = fun(float(val[nmik]))
		except ValueError:
			sg.Popup('Not a valid float number: ', _labels[nmik])
			val[nmik] = ''
			_window[nmik].update('')
			return
		val[kmk] = str(v)
		_update_outputs([kmk], {kmk: v})


if __name__ == "__main__":
	while True:
		event, values = _window.read()
		if event == sg.WIN_CLOSED:
			break
		# sg.popup( ' event: ', event, ' values: ', values )
		if event == 'help':
			_print_help()

		if event in _input_keys:
			# validate input/output field values - first stage - only disable invalid characters
			for k in _input_keys:
				validated = _validate_input(values[k])
				if validated is not None:
					_window[k].update(validated)

		if event == 'clear':
			# clear all GUI inputs
			for k in _section_cl_keys:
				_clear_section_values(_section_cl_keys[k])

		if event in ('cd', 'cp'):
			# speed of light value selection cd = approximate value 3e8 default, cp - precise value
			if event != _ck_old:
				_ck_old = event
				_C = _CS[event]
				_recompute_all()

		if event == 'prec':
			# change precision for output fields, input fields stay as typed by user
			_precision = 13 if values['prec'] == 'e' else int(values['prec'])
			_recompute_all()

		if event in _section_cl_keys:
			# clear just one section
			_clear_section_values(_section_cl_keys[event])

		if event in ('cafu', 'cafd'):
			# copy antenna section values to uplink or downlink
			vts = {
				'cafu': {'fcul': values['fc'], 'gtg': _get_val('ga', values), 'etg': _get_val('eta', values)},
				'cafd': {'fcdl': values['fc'], 'gts': _get_val('ga', values), 'ets': _get_val('eta', values)}
			}
			_set_values(vts[event])

		if event in ('t1', 't2', 't3'):
			# load unit test values
			TestValues = _unit_test_values(event)
			for k in _section_keys:
				_set_section_values(k, TestValues)

		if event in _section_keys:
			# ugly hack for conversions:
			if event == 'c0a':
				convert('lam', 'fc', values, _wavelength2freq)
			if event == 'c2':
				convert('dulm', 'dul', values, _nmi2km)
			if event == 'c5':
				convert('ddlm', 'ddl', values, _nmi2km)

			# run actual sections calculations
			ok, r = _get_mandatory(values, _section_mandatories[event])
			if not ok:
				_window[r].update('')
				sg.popup('Input error: Necessery field is missing or wrong: ', _labels[r])
			else:
				o = _get_optional(values, _section_optionals[event])
				pd = {**r, **o}
				pt = pd.values()

				if event == 'c0d': #dB convertor section works little differently
					o = _get_optional(values, _section_optionals[event], None)
					ot = _dbconv(o['svl'], o['svdb'], o['lvl'], o['lvdb'])
				else:
					fun = _fun[event]
					ot = fun(*pt)

				out = tuple2dict(ot, _section_outputs[event])
				_update_outputs(_section_outputs[event], out)

_window.close()
